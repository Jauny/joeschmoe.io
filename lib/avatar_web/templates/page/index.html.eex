<div class="hero">
  <div class="hero__title">
    <h1>Joe Schmoe</h1>
    <h3>An illustrated avatar collection for developers and designers</h3>
  </div>

  <div class="hero__cta">
    <a href="#sandbox" class="btn" onclick="doScrolling('#sandbox', 500)">Try the tool</a>
    <h3><a href="#wtf" onclick="doScrolling('#documentation', 500)">See the docs</a></h3>
  </div>

  <div class="scroll"><div class="arrow arrow--down"></div></div>
</div>

<section class="sandbox" id="sandbox">
  <h2>get a schmoe</h2>
  <div class="two-cols">
    <div class="two-cols__col">
      <form>
        <div class="input-wrapper">
          <label for="sandbox__input">identifier</label>
          <div class="input">
            <span class="input__before">https://joeschmoe.io/api/v1/</span>
            <input autocomplete="off" id="sandbox__input" onkeyup="onInputKeyup('#sandbox')" type="text" placeholder="<seed>" />
            <input id="sandbox__hidden" class="hidden" value="https://joeschmoe.io/api/v1/random" />
          </div>
        </div>
        <a class="btn btn--pulse" onClick="copyInputValue('#sandbox')">Copy</a>
      </form>
    </div>

    <div class="two-cols__col sandbox__img">
      <img id="sandbox__img" src="/api/local/random" />
    </div>
  </div>
</section>

<section class="meet bg--beige">
  <div class="two-cols">
    <div class="two-cols__col">
      <h2>jess schmoe</h2>
      <div class="input-wrapper">
        <label for="jess__input">identifier</label>
        <div class="input">
          <span class="input__before">
            <span class="text--blue">&lt;img</span>
            src=&quot;//joeschmoe.io/api/v1/
          </span>
          <span class="input__fake">jess</span>
          <span class="input__before">&quot;<span class="text--blue">&gt;</span></span>
        </div>
      </div>
      <img src="/api/local/jess" />
    </div>

    <div class="two-cols__col">
      <h2>jon schmoe</h2>
      <div class="input-wrapper">
        <label for="jon">identifier</label>
        <div class="input">
          <span class="input__before">
            <span class="text--blue">&lt;img</span>
            src=&quot;//joeschmoe.io/api/v1/
          </span>
          <span class="input__fake">jon</span>
          <span class="input__before">&quot;<span class="text--blue">&gt;</span></span>
        </div>
      </div>
      <img src="/api/local/jon" />
    </div>
  </div>
</section>

<section class="wtf" id="wtf">
  <h2>wtf is this?</h2>
  <p>
    Joe Schmoe is a free, illustrated avatar generator.
    It is mostly used as a profile picture placeholder for design mocks or
    on live websites for users who haven't updated their picture yet. <br/>
    Feel free to use them however you feel like!
  </p>

  <p>
    The big advantage of our API is that in addition of being able to request a random Joe or a specific one by name,
    you can also make a request from any string which will allways return the same Joe.<br/>
    So you can use your users' name, email or id to keep their avatar consistent while being different
    from other profile pictures!
  </p>

  <div class="two-cols two-cols--mobile">
    <div class="two-cols__col text--right">
      <a href="#sandbox" class="btn btn--fixed" onclick="doScrolling('#sandbox', 500)">Try it out!</a>
    </div>
    <div class="two-cols__col">
      <a href="#documentation" class="btn btn--fixed btn--blue" onclick="doScrolling('#documentation', 500)">See the docs</a>
    </div>
  </div>
</section>

<section class="documentation" id="documentation">
  <h2>Documentation</h2>
  <p>There are multiple ways you can query for a Schmoe.</p>

  <p class="small">All queries are prepended with <span class="highlight">https://joeschmoe.io</span></p>

  <h4>Get a Schmoe from a seed</h4>
  <div class="two-cols doc">
    <div class="two-cols__col col--ar">
      <p class="small">Get a Schmoe from :seed. The same seed always returns the same Schmoe.</p>
    </div>
    <div class="two-cols__col">
      <pre>/api/v1/<span>:seed</span></pre>
    </div>
  </div>

  <h4>Get a random Schmoe</h4>
  <p>You can query a random Schmoe from all of them, or from females or males only.</p>
    <div class="two-cols doc">
      <div class="two-cols__col">Get a random Schmoe</div>
      <div class="two-cols__col">
        <pre>/api/v1/<span>random</span></pre>
      </div>
    </div>

    <div class="two-cols doc">
      <div class="two-cols__col">Get a random female Schmoe</div>
      <div class="two-cols__col">
        <pre>/api/v1/<span>female/random</span></pre>
      </div>
    </div>

    <div class="two-cols doc">
      <div class="two-cols__col">Get a random male Schmoe</div>
      <div class="two-cols__col">
        <pre>/api/v1/<span>male/random</span></pre>
      </div>
    </div>

  <h4>Get a specific Schmoe</h4>
  <div class="two-cols doc">
    <div class="two-cols__col">Get the Schmoe named Jon.</div>
    <div class="two-cols__col">
      <pre>/api/v1/<span>jon</span></pre>
    </div>
  </div>
</section>

<section class="originals">
  <h2>All the Schmoes!</h2>
  <div class="originals__all">
    <%= for original <- Enum.shuffle(all_originals()) do %>
      <div class="originals__original">
        <%= raw(original.svg) %>
        <p>
          <span><%= original.name %></span>
        </p>
      </div>
    <% end %>
  </div>
</section>

<section class="footer bg--beige">
  <p>Created with <span class="text--red">&#9829;</span> by <a href="http://jonandjess.studio" target="_blank">jon&jess</a></p>
</section>

<script>
  const onInputKeyup = (id) => {
    updateHiddenInputValue(id)
    updateImage(id)
  }

  const updateHiddenInputValue = (id) => {
    const input = document.querySelector(id + '__input')
    const hidden = document.querySelector(id + '__hidden')

    const newValue = input.value.length > 0 ? input.value : 'random'
    hidden.value = 'https://joeschmoe.io/api/v1/' + newValue
  }

  const updateImage = (id) => {
    const input = document.querySelector(id + '__input')
    const img = document.querySelector(id + '__img')
    img.src = '/api/local/' + (input.value.length ? input.value : 'random')
  }

  const copyInputValue = (id) => {
    const hidden = document.querySelector(id + '__hidden')
    hidden.select()
    document.execCommand('copy')
  }

  function getElementY(query) {
    return window.pageYOffset + document.querySelector(query).getBoundingClientRect().top
  }

  function doScrolling(element, duration) {
    var startingY = window.pageYOffset
    var elementY = getElementY(element)
    // If element is close to page's bottom then window will scroll only to some position above the element.
    var targetY = document.body.scrollHeight - elementY < window.innerHeight ? document.body.scrollHeight - window.innerHeight : elementY
    var diff = targetY - startingY
    // Easing function: easeInOutCubic
    // From: https://gist.github.com/gre/1650294
    var easing = function (t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }
    var start

    if (!diff) return

    // Bootstrap our animation - it will get called right before next frame shall be rendered.
    window.requestAnimationFrame(function step(timestamp) {
      if (!start) start = timestamp
      // Elapsed miliseconds since start of scrolling.
      var time = timestamp - start
      // Get percent of completion in range [0, 1].
      var percent = Math.min(time / duration, 1)
      // Apply the easing.
      // It can cause bad-looking slow frames in browser performance tool, so be careful.
      percent = easing(percent)

      window.scrollTo(0, startingY + diff * percent)

      // Proceed with animation as long as we wanted it to.
      if (time < duration) {
        window.requestAnimationFrame(step)
      }
    })
  }
</script>
